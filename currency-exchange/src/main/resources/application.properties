server.port=8000
spring.application.name=currency-exchange
spring.config.import=optional:configserver:http://localhost:8888
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=sa
spring.h2.console.enabled=true
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.show-sql=true
spring.jpa.defer-datasource-initialization=true
#this is due to the fact that the data.sql file gets executed before creation of the tables
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka


#Retry---->

#configuring retries in resilience 4j
resilience4j.retry.instances.sample-api.maxAttempts=5

#wait for some time and again make the api call
resilience4j.retry.instances.sample-api.waitDuration=1s

#since retries is 5 and wait is 1 sec there it will take 5 sec to get fallback response


#this makes subsequent attempts after exponential time of the default value , ie 1st 1 sec , then 2 sec, then 3sec, then 4 sec, till all 5 attempts have been made
resilience4j.retry.instances.sample-api.enableExponentialBackoff=true

#CircuitBreaker ----->

#circuitbreaker runs when number of failure crosses 90 , circuitbreaker starts sending fallbacks after this / returning requests
resilience4j.circuitbreaker.instances.default.failureRateThreshold=90


#RateLimiter ------>

#set a rate 2 req every 10 sec
resilience4j.ratelimiter.instances.default.limitForPeriod=2
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s


#BulkHead ------->
#allow max 10 concurrent calls
resilience4j.bulkhead.instances.bulkfeature.maxConcurrentCalls=10